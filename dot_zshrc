#!/usr/bin/env zsh
# ------------------------------------------------------------------------------
# Hotkeys & Shortcuts
# ------------------------------------------------------------------------------
# Ctrl+H : Fuzzy search through command history (fzf + preview + bat)
# Ctrl+F : Fuzzy find files using `fd`
# Alt+D  : Fuzzy change directory using `fd`
# Ctrl+G : Open interactive hotkey menu (runs commands)
# Ctrl+R : Reverse history (custom version)
# Ctrl+T : File select (custom version)
# Alt+C  : Directory jump (fzf default)
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Welcome Banner
# ------------------------------------------------------------------------------
echo -e "\n\e[1;36m╔════════════════════════════════════════════╗"
echo -e   "║    🧙 Welcome back, shell sorcerer! ⚡      ║"
echo -e   "║  Use Ctrl+G to summon your cheat menu.    ║"
echo -e   "╚════════════════════════════════════════════╝\e[0m\n"

# ------------------------------------------------------------------------------
# Finalized .zshrc (with Wizard Mode History Search)
# ------------------------------------------------------------------------------

# Ensure safe environment variables for non-root users.
if [[ "$(whoami)" != "root" ]]; then
    export ZPFX="$HOME/.local/share/zinit/polaris"
    export ZSH_CACHE_DIR="$HOME/.cache/zinit"
fi

# Ensure HOME is properly set.
if [[ "$HOME" = "/root" && "$(whoami)" != "root" ]]; then
    echo "Warning: HOME is incorrectly set to /root. Fixing."
    HOME="$(getent passwd $(whoami) | cut -d: -f6)"
fi

# Set a safe TMPDIR.
export TMPDIR="${TMPDIR:-/tmp}"

###############################################################################
# Interactive Hotkey Menu (FZF-powered)
###############################################################################
hotkey_menu_widget() {
  local choice
  choice=$(cat <<EOF | fzf --prompt="Hotkey Menu > " --border --reverse --header="🧙 ZSH Shortcut Menu"
History Search (Ctrl+H)
File Search (Ctrl+F)
Directory Jump (Alt+D)
Reverse History (Ctrl+R)
File Select (Ctrl+T)
Directory Jump Default (Alt+C)
EOF
)
  case "$choice" in
    *"History Search"*) zle fzf-history-widget ;;
    *"File Search"*) zle fzf-file-widget ;;
    *"Directory Jump"*) zle fzf-dir-widget ;;
    *"Reverse History"*) zle fzf-reverse-history-widget ;;
    *"File Select"*) zle fzf-file-select-widget ;;
    *"Directory Jump Default"*) zle fzf-dir-widget ;;
    *) zle redisplay ;;
  esac
}
zle -N hotkey_menu_widget
bindkey '^G' hotkey_menu_widget

###############################################################################
# History Settings
###############################################################################
export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=10000
export SAVEHIST=10000
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt SHARE_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_VERIFY
setopt EXTENDED_HISTORY

###############################################################################
# History/Directory/File Widgets
###############################################################################
fzf-history-widget() {
  local selected
  selected=$(fc -l 1 | awk '{$1=""; print substr($0,2)}' | fzf --tac --reverse --no-sort --preview 'echo {}' --preview-window=up:3)
  if [[ -n "$selected" ]]; then
    BUFFER=$selected
    CURSOR=${#BUFFER}
    zle redisplay
  fi
}
zle -N fzf-history-widget
bindkey '^H' fzf-history-widget

fzf-file-widget() {
  local selected
  selected=$(fd --type f --hidden --follow --exclude .git | fzf)
  if [[ -n "$selected" ]]; then
    BUFFER="$selected"
    CURSOR=${#BUFFER}
    zle redisplay
  fi
}
zle -N fzf-file-widget
bindkey '^F' fzf-file-widget

fzf-dir-widget() {
  local selected
  selected=$(fd --type d --hidden --follow --exclude .git | fzf)
  if [[ -n "$selected" ]]; then
    BUFFER="cd $selected"
    CURSOR=${#BUFFER}
    zle redisplay
  fi
}
zle -N fzf-dir-widget
bindkey '^[D' fzf-dir-widget

###############################################################################
# Environment Variables & Aliases
###############################################################################
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"

# Source additional configuration files if available.
[[ -f "$HOME/.config/zsh/aliases.zsh" ]] && source "$HOME/.config/zsh/aliases.zsh"
[[ -f "$HOME/.config/zsh/functions.zsh" ]] && source "$HOME/.config/zsh/functions.zsh"
[[ -f "$HOME/.config/zsh/starship.zsh" ]] && source "$HOME/.config/zsh/starship.zsh"

###############################################################################
# Warp Integration (if applicable)
###############################################################################
if [[ -n "$WARP_SESSION_ID" ]]; then
    echo -ne "\e]1337;SetUserVar=cedRcFileForWarp=$(printf '%s' '{"shell":"zsh"}' | base64)\a"
fi


###############################################################################
# Shell wrapper for Yazi 
###############################################################################
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}
###############################################################################
# Initialize Zinit
###############################################################################
if [[ "${ZINIT_HOME}" == "/root"* && "$(whoami)" != "root" ]]; then
    echo "Warning: ZINIT_HOME points to /root. Redirecting to $HOME."
    ZINIT_HOME="$HOME${ZINIT_HOME#/root}"
fi

ZINIT_HOME="${ZINIT_HOME:-${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git}"

if ! command mkdir -p "$(dirname "$ZINIT_HOME")" 2>/dev/null; then
    ZINIT_HOME="$HOME/.zinit/zinit.git"
    echo "Note: Using fallback location for Zinit: $ZINIT_HOME"
    command mkdir -p "$(dirname "$ZINIT_HOME")" 2>/dev/null || {
        ZINIT_HOME="$HOME/.cache/zinit/zinit.git"
        echo "Note: Using second fallback location for Zinit: $ZINIT_HOME"
        command mkdir -p "$(dirname "$ZINIT_HOME")" 2>/dev/null || {
            echo "Warning: Could not create any Zinit directory."
        }
    }
fi

if [ ! -d "$ZINIT_HOME/.git" ] && command -v git >/dev/null 2>&1; then
    git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME" 2>/dev/null || {
        echo "Warning: Could not clone Zinit repository. Plugin functionality will be limited."
    }
fi

if [ -f "${ZINIT_HOME}/zinit.zsh" ]; then
    source "${ZINIT_HOME}/zinit.zsh"
else
    echo "Warning: Zinit not found. Plugin functionality will be limited."
    zinit() { echo "Zinit not installed. Skipping plugin: $*"; }
fi

# Load LS_COLORS via Zinit Pack.
zinit pack for ls_colors

###############################################################################
# Optimize Plugin Loading (Zinit Annexes)
###############################################################################
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

###############################################################################
# Initialize Completion
###############################################################################
autoload -U compinit
zstyle ':completion:*' menu select
if [[ -f "$HOME/.zcompdump" ]]; then
    compinit -C
else
    compinit
fi

##############################################################################
# Set default editor to nvim
################################################################################
export EDITOR=nvim

###############################################################################
# Initialize Direnv
################################################################################
eval "$(direnv hook zsh)"

##############################################################################
# Initialize Starship Prompt
###############################################################################
eval "$(starship init zsh)"
export STARSHIP_CONFIG=~/.config/starship.toml

##############################################################################
# Initialize Taskfile Autocompletion
###############################################################################
eval "$(task --completion zsh)"

##############################################################################
# Set language to UTF-8
# This is important for proper display of special characters.
###############################################################################
export LANG=en_US.UTF-8

###############################################################################
# Install and Initialize Zoxide
###############################################################################
zinit ice from"gh-r" as"program"
zinit light ajeetdsouza/zoxide
if (( $+commands[zoxide] )); then
    eval "$(zoxide init zsh)"
else
    echo "Zoxide not found. It will be installed on next shell restart."
fi

###############################################################################
# Performance-Critical Plugins
###############################################################################
zinit ice wait lucid atinit"zpcompinit; zpcdreplay"
zinit light zdharma-continuum/fast-syntax-highlighting

###############################################################################
# Autosuggestions
###############################################################################
zinit ice wait lucid atload"!_zsh_autosuggest_start"
zinit load zsh-users/zsh-autosuggestions

###############################################################################
# FZF Setup
###############################################################################
zinit ice from"gh-r" as"program"
zinit light junegunn/fzf
zinit snippet 'https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.zsh'
zinit snippet 'https://raw.githubusercontent.com/junegunn/fzf/master/shell/completion.zsh'
export FZF_DEFAULT_OPTS="--height 40% --reverse --border --inline-info"
export FZF_CTRL_T_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'

###############################################################################
# Install fd and bat
###############################################################################
zinit ice from"gh-r" as"program" pick"*/fd"
zinit light @sharkdp/fd
zinit ice from"gh-r" as"program" pick"*/bat"
zinit light @sharkdp/bat

###############################################################################
# Install eza (Modern ls Replacement)
###############################################################################
zinit ice wait"1" lucid from"gh-r" as"program" extract
zinit light eza-community/eza
export EZA_COLORS="di=34:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43"
export EZA_ICONS_AUTO=true

###############################################################################
# Customize LS_COLORS for Terraform Files
###############################################################################
export LS_COLORS="*.tf=38;5;141:$LS_COLORS"

###############################################################################
# Install jq
###############################################################################
zinit ice from"gh-r" as"program" sbin
zinit load jqlang/jq

###############################################################################
# FZF History Search (Wizard Mode)
###############################################################################
export ZSH_FZF_HISTORY_SEARCH_FZF_OPTIONS='--height 40% --reverse --border --preview "bat --style=numbers --color=always --line-range :10 <(echo {})" --preview-window=up:3:wrap'
export ZSH_FZF_HISTORY_SEARCH_HISTCMD_COLOR='36'
export ZSH_FZF_HISTORY_SEARCH_HIGHLIGHT='true'
zinit light joshskidmore/zsh-fzf-history-search

###############################################################################
# Daily Auto-Update for Zinit Plugins
###############################################################################
ZINIT_UPDATE_FILE="$HOME/.cache/zinit_last_update"
ZINIT_UPDATE_DIR="$(dirname "$ZINIT_UPDATE_FILE")"
if ! [[ -d "$ZINIT_UPDATE_DIR" ]]; then
    command mkdir -p "$ZINIT_UPDATE_DIR" 2>/dev/null || {
        ZINIT_UPDATE_FILE="/tmp/zinit_last_update_$(whoami)"
        echo "Using fallback location for Zinit update: $ZINIT_UPDATE_FILE"
    }
fi
if [[ -f "$ZINIT_UPDATE_FILE" && ! -w "$ZINIT_UPDATE_FILE" ]]; then
    ZINIT_UPDATE_FILE="/tmp/zinit_last_update_$(whoami)"
    echo "Using fallback location for Zinit update: $ZINIT_UPDATE_FILE"
fi
if [[ "$(date +%s)" -gt "$(( $(cat $ZINIT_UPDATE_FILE 2>/dev/null || echo 0) + 86400 ))" ]]; then
    zinit self-update && zinit update
    echo "$(date +%s)" > "$ZINIT_UPDATE_FILE" 2>/dev/null || echo "Warning: Failed to update timestamp file"
fi

# ------------------------------------------------------------------------------
# End of .zshrc (Wizard Mode Activated)
# ------------------------------------------------------------------------------
